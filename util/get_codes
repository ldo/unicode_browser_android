#!/usr/bin/python3
#+
# This script converts the system-installed Unicode tables into a Java
# source file (Unicode.java) that is compiled into the Android app.
# On Debian, the Unicode tables are installed as part of the “unicode-data”
# package, and are found in the /usr/share/unicode directory.
#
# This script is not run automatically as part of the build process,
# but is invoked manually. This is to ensure consistent builds, in
# case your system has a different version of the Unicode tables. The
# output of this script is already included in the source tree, so you
# only need to run it if your system has a newer version of the
# Unicode tables, and you want to update the source accordingly.
#
# Copyright 2013 Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
#-

import sys
import re

data_file = "/usr/share/unicode/NamesList.txt"
versionstr = "@@@\tThe Unicode Standard "
out_file = "src/Unicode.java"

chars = {}
categories = []
with open(file = data_file, errors = "ignore") as data :
    charcode = None
    char_category = None
    eof = False
    line = data.readline().rstrip()
    if line.startswith(versionstr) :
        version = line[len(versionstr):]
        sys.stdout.write("Unicode version: “%s”\n" % version)
    else :
        raise AssertionError("first line doesn’t contain version")
    #end if
    while True :
        line = data.readline()
        if len(line) == 0 :
            eof = True
        #end if
        nextcharcode = None
        if not eof :
            line = line.rstrip()
            if len(line) != 0 :
                nextcharcode = re.match(r"[0-9A-F]+", line)
                if nextcharcode != None :
                    line = line[nextcharcode.end():]
                #end if
            #end if
        #end if
        if (eof or nextcharcode != None or line.startswith("@")) and charcode != None :
            include_it = True
            if charname.startswith("<") :
                if len(samechar) != 0 :
                    charname = samechar[0]
                    samechar = samechar[1:]
                else :
                    include_it = False
                #end if
            #end if
            if include_it :
                chars[charcode] = \
                    {
                        "name" : charname,
                        "category" : char_category,
                        "other_names" : samechar,
                        "similar" : likechar,
                    }
            #end if
            sys.stdout.write \
              (
                    "*%s U+%04X “%s” (%s) = (%s), like (%s)\n"
                %
                    (
                        ("IGNORE", "")[include_it],
                        charcode,
                        charname,
                        char_category,
                        "; ".join(samechar),
                        "; ".join("U+%04X" % c for c in likechar),
                    )
              )
            charcode = None
        #end if
        if eof :
            break
        if nextcharcode != None :
            charcode = int(nextcharcode.group(), 16)
            assert line.startswith("\t")
            charname = line[1:]
            samechar = []
            likechar = set()
        elif charcode != None and line.startswith("\t") :
            line = line[1:]
            if line.startswith("= ") :
                samechar.append(line[2:].replace("\"", ""))
            elif line.startswith("x ") :
                nextpos = 2
                while True :
                    nextlikecharcode = re.search(r"[0-9A-F]+", line[nextpos:])
                    if nextlikecharcode == None :
                        break
                    likecharcode = int(nextlikecharcode.group(), 16)
                    nextpos += nextlikecharcode.end()
                #end while
                likechar.add(likecharcode)
            else :
                pass # sys.stdout.write("Ignore line for U+%04X: %s\n" % (charcode, repr(line)))
            #end if
        elif line.startswith("@\t\t") :
            char_category = line[3:]
            if char_category not in categories :
                categories.append(char_category)
            #end if
        else :
            pass # sys.stdout.write("Ignore line: %s\n" % repr(line))
        #end if
    #end while
#end with
category_codes = {}
for i, name in enumerate(categories) :
    category_codes[name] = i
#end for
out = open(file = out_file, mode = "w", encoding = "utf-8")
out.write("package nz.gen.geek_central.unicode_selector;\n")
out.write \
  (
        "/*\n"
        "    Character table for Unicode Selector.\n"
        "    Automatically generated by get_codes script from\n"
        "    version %s of the Unicode database.\n"
        "\n"
        "    This file is in the public domain.\n"
        "*/\n"
        "\n"
    %
        version
  )
out.write("import java.util.HashMap;\n")
out.write("import android.util.SparseArray;\n")
out.write("public class Unicode\n")
out.write("  {\n")
out.write("    public static final String Version = \"%s\";\n" % version)
out.write("\n")
out.write \
  (
    "    public static class CharInfo\n"
    "      {\n"
    "        public final int Category; /* map to name in CategoryNames table */\n"
    "        public final String Name;\n"
    "        public final String[] OtherNames;\n"
    "        public final int[] LikeChars; /* codes for other similar chars */\n"
    "\n"
    "        public CharInfo\n"
    "          (\n"
    "            int Category,\n"
    "            String Name,\n"
    "            String[] OtherNames,\n"
    "            int[] LikeChars\n"
    "          )\n"
    "          {\n"
    "            this.Category = Category;\n"
    "            this.Name = Name.intern();\n"
    "            this.OtherNames = OtherNames;\n"
    "            this.LikeChars = LikeChars;\n"
    "          } /*CharInfo*/\n"
    "\n"
    "      } /*CharInfo*/\n"
  )
out.write("\n")
out.write("    public static final SparseArray<String> CategoryNames = new SparseArray<String>();\n")
out.write("    public static final HashMap<String, Integer> CategoryCodes = new HashMap<String, Integer>();\n")
out.write("    static\n")
out.write("      {\n")
for name in categories :
    out.write("        CategoryNames.put(%d, \"%s\");\n" % (category_codes[name], name))
    out.write("        CategoryCodes.put(\"%s\", %d);\n" % (name, category_codes[name]))
#end for
out.write("      } /*static*/\n")
out.write("\n")
out.write("    public static final HashMap<String, Integer> CharNamesToCodes = new HashMap<String, Integer>();\n")
out.write("    public static final SparseArray<CharInfo> Chars = new SparseArray<CharInfo>(); /* mapping from character code to info about character */\n")
# initialization code for the character table has to be split up into multiple method
# calls to avoid a “code too large” error in the Java compiler, and then these method
# calls have to be put into separate classes to avoid a “too many constants” error.
charsiter = iter(chars)
nrsegs = 0
curseg = None
segs = []
maxseg = 1000
while True :
    charcode = next(charsiter, None)
    if charcode == None or curseg != None and curseglen == maxseg :
        if curseg != None :
            out.write("          } /*%s*/\n" % curseg)
            out.write("      } /*%s*/;\n" % curseg)
            curseg = None
        #end if
    #end if
    if charcode == None :
        break
    thischar = chars[charcode]
    if curseg == None :
        nrsegs += 1
        curseg = "CharsInit%d" % nrsegs
        out.write("    private static class %s\n" % curseg)
        out.write("      {\n")
        out.write("        public %s()\n" % curseg)
        out.write("          {\n")
        segs.append(curseg)
        curseglen = 0
    #end if
    out.write("            CharNamesToCodes.put(\"%s\", %#x);\n" % (thischar["name"], charcode))
    out.write("            Chars.put\n")
    out.write("              (\n")
    out.write("                %#x,\n" % charcode)
    out.write("                new CharInfo\n")
    out.write("                  (\n")
    out.write("                    /*Category =*/ %d, /* %s */\n" % (category_codes[thischar["category"]], thischar["category"]))
    out.write("                    /*Name =*/ \"%s\",\n" % thischar["name"])
    out.write("                    /*OtherNames =*/ new String[] {%s},\n" % ", ".join("\"%s\"" % s.replace("\\", "\\\\") for s in thischar["other_names"]))
    out.write("                    /*LikeChars =*/ new int[] {%s}\n" % ", ".join("%#x" % i for i in thischar["similar"]))
    out.write("                  )\n")
    out.write("              );\n")
#end for
    curseglen += 1
#end while
out.write("    static\n")
out.write("      {\n")
for seg in segs :
    out.write("        new %s();\n" % seg)
#end for
out.write("      } /*static*/\n")
out.write("\n")
out.write("  } /*Unicode*/;\n")
out.flush()
out.close()
