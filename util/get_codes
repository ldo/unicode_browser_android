#!/usr/bin/python3
#+
# This script converts NamesList.txt from the Unicode character
# database into a binary data file that is compiled into the Android
# app. The UCD is downloadable from
# <http://www.unicode.org/Public/UCD/latest/ucd/>; in particular
# NamesList.txt is available at
# <http://www.unicode.org/Public/UCD/latest/ucd/NamesList.txt>. Or on
# a Debian system, install the unicode-data package, and the files
# will be in the /usr/share/unicode directory.
#
# This script is not run automatically as part of the build process,
# but is invoked manually. This is to ensure consistent builds, in
# case your system has a different version of the Unicode tables. The
# output of this script is already included in the source tree, so you
# only need to run it if your system has a newer version of the
# Unicode tables, and you want to update the source accordingly.
#
# Copyright 2013 Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.
#-

import sys
import re
import struct

class DataWriter :
#+
#    file format (all offset, count and character code fields are little-endian unsigned
#    32-bit integers):
#        * offset to nr char codes field (should be 28)
#        * offset to nr categories field (should be 28 + (nr char codes) * 20)
#        * offset to nr character runs field
#        * offset to start of name strings
#        * offset to start of alternative names
#        * offset to start of like char codes
#        * offset to version string (start offset within name strings table)
#        * nr char codes
#        * array [nr char codes] of char codes
#        * array [nr char codes] of char names (start offsets within name strings table)
#        * array [nr char codes] of char category codes
#        * array [nr char codes] of alternative names (start offsets within alternative names table)
#        * array [nr char codes] of like char codes (start offsets within like char codes table)
#        * nr categories
#        * array [nr categories] of category names (start offsets within name strings table)
#        * nr character runs
#        * array [nr character runs] of (start code, end code, start index within character arrays)
#        * table of alternative names (start offsets within name strings table),
#          each preceded by count
#        * table of like char codes, each preceded by count
#        * table of name strings (7-bit ASCII only), each preceded by length byte
#-

    def __init__(self, outfilename, version) :
        self.out = open(file = outfilename, mode = "wb")
        self.chars = []
        self.categories = []
        self.namestrings = b""
        self.nrstrings = 0
        self.longest_name = ""
        self.longest_other_name = ""
        self.othernames = b""
        self.likechars = b""
        self.version_start = self.add_string(version)
        self.char_runs = []
        self.prevcharcode = -1
        self.firstcharcode = None
    #end __init__

    #+
    # Internal stuff
    #-

    def add_string(self, s) :
        s = s.encode("ascii")
        if len(s) > 127 :
            raise AssertionError("string %s too long to encode" % repr(s))
        #end if
        startoffset = len(self.namestrings)
        self.namestrings += struct.pack("<B", len(s)) + s
        self.nrstrings += 1
        return \
            startoffset
    #end add_string

    def finish_char_run(self) :
        if self.firstcharcode != None :
            self.char_runs.append \
              (
                {
                    "startcode" : self.firstcharcode,
                    "endcode" : self.prevcharcode,
                    "startindex" : self.startindex,
                }
              )
            self.firstcharcode = None
        #end if
    #end finish_char_run

    #+
    # Caller-visible stuff follows
    #-

    def add_category(self, category_name) :
        index = len(self.categories)
        self.categories.append(self.add_string(category_name))
        return \
            index
    #end add_category

    def add_char(self, code, name, category, othernames, likechars) :
        if code <= self.prevcharcode :
            raise AssertionError("characters must be added in monotonically increasing code order")
        #end if
        if self.firstcharcode == None or code > self.prevcharcode + 1 :
            self.finish_char_run()
            self.firstcharcode = code
            self.startindex = len(self.chars)
        #end if
        if len(name) > len(self.longest_name) :
            self.longest_name = name
        #end if
        for s in othernames :
            if len(s) > len(self.longest_other_name) :
                self.longest_other_name = s
            #end if
        #end for
        self.prevcharcode = code
        namestart = self.add_string(name)
        othernamesstart = len(self.othernames)
        self.othernames += struct.pack("<L", len(othernames))
        for name in othernames :
            self.othernames += struct.pack("<L", self.add_string(name))
        #end for
        likecharsstart = len(self.likechars)
        self.likechars += struct.pack("<L", len(likechars))
        for c in likechars :
            self.likechars += struct.pack("<L", c)
        #end for
        self.chars.append \
          (
            {
                "code" : code,
                "name" : namestart,
                "category" : category,
                "othernames" : othernamesstart,
                "likechars" : likecharsstart,
            }
          )
    #end add_char

    def finish(self) :
        self.finish_char_run()
        charcodes = struct.pack("<L", len(self.chars))
        char_categories = b""
        char_names = b""
        othernames = b""
        likechars = b""
        for c in self.chars :
            charcodes += struct.pack("<L", c["code"])
            char_names += struct.pack("<L", c["name"])
            char_categories += struct.pack("<L", c["category"])
            othernames += struct.pack("<L", c["othernames"])
            likechars += struct.pack("<L", c["likechars"])
        #end for
        char_table = charcodes + char_names + char_categories + othernames + likechars
        category_table = struct.pack("<L", len(self.categories))
        for i in self.categories :
            category_table += struct.pack("<L", i)
        #end for
        char_runs = struct.pack("<L", len(self.char_runs))
        for run in self.char_runs :
            char_runs += struct.pack("<LLL", run["startcode"], run["endcode"], run["startindex"])
        #end for
        sys.stdout.write \
          (
                "chars: %(nrchars)d, categories: %(nrcategories)d, strings: %(nrstrings)d/%(lenstrings)d bytes, longest name “%(longest_name)s”(%(longest_name_len)d), longest other name “%(longest_other_name)s”(%(longest_other_name_len)d), runs: %(nrruns)d\n"
            %
                {
                    "nrchars" : len(self.chars),
                    "nrcategories" : len(self.categories),
                    "nrstrings" : self.nrstrings,
                    "lenstrings" : len(self.namestrings),
                    "longest_name" : self.longest_name,
                    "longest_name_len" : len(self.longest_name),
                    "longest_other_name" : self.longest_other_name,
                    "longest_other_name_len" : len(self.longest_other_name),
                    "nrruns" : len(self.char_runs),
                }
          )
        hdrsize = 28
        self.out.write \
          (
            struct.pack
              (
                "<LLLLLLL",
                hdrsize, # offset to characters
                hdrsize + len(char_table), # offset to categories
                hdrsize + len(char_table) + len(category_table), # offset to runs
                hdrsize + len(char_table) + len(category_table) + len(char_runs) + len(self.othernames) + len(self.likechars), # offset to names table
                hdrsize + len(char_table) + len(category_table) + len(char_runs), # offset to alternative names
                hdrsize + len(char_table) + len(category_table) + len(char_runs) + len(self.othernames), # offset to like chars
                self.version_start,
              )
          )
        self.out.write(char_table)
        self.out.write(category_table)
        self.out.write(char_runs)
        self.out.write(self.othernames)
        self.out.write(self.likechars)
        self.out.write(self.namestrings)
        self.out.flush()
        self.out.close()
        self.out = None
    #end finish

#end DataWriter

#+
# Mainline
#-

if len(sys.argv) != 2 :
    raise RuntimeError("usage: %s NamesList.txt" % sys.argv[0])
#end if
data_file = sys.argv[1]
versionstr = "@@@\tThe Unicode Standard "
out_file = "res/raw/unicode.rtttl"
  # choose some suitable meaningless file extension to disable compression (file is too big to
  # decompress on pre-Android-2.3)
  # see <http://ponystyle.com/blog/2010/03/26/dealing-with-asset-compression-in-android-apps/>
  # for list of extensions which are not compressed
hexdigits = r"[0-9A-F]+" # file always has them in uppercase

remap_categories = \
    { # split some categories because I don’t like lumping control characters together with printable ones
        "C0 Controls and Basic Latin (Basic Latin)" : ["C0 Controls", "Basic Latin"],
        "C1 Controls and Latin-1 Supplement (Latin-1 Supplement)" : ["C1 Controls", "Latin-1 Supplement"],
    }

chars = {}
categories = []
categories_used = set()
with open(file = data_file, errors = "ignore") as data :
    charcode = None
    char_category = None
    eof = False
    line = data.readline().rstrip()
    if line.startswith(versionstr) :
        version = line[len(versionstr):]
        sys.stdout.write("Unicode version: “%s”\n" % version)
    else :
        raise AssertionError("first line doesn’t contain version")
    #end if
    while True :
        line = data.readline()
        if len(line) == 0 :
            eof = True
        #end if
        nextcharcode = None
        if not eof :
            line = line.rstrip()
            if len(line) != 0 :
                nextcharcode = re.match(hexdigits, line)
                if nextcharcode != None :
                    line = line[nextcharcode.end():]
                #end if
            #end if
        #end if
        if (eof or nextcharcode != None or line.startswith("@")) and charcode != None :
            include_it = True
            if charname.startswith("<") :
                if len(samechar) != 0 :
                    charname = samechar[0]
                    samechar = samechar[1:]
                else :
                    include_it = False
                #end if
            #end if
            if include_it :
                remap = remap_categories.get(char_category)
                if remap != None :
                    use_char_category = remap[charcode & 127 >= 32 and charcode != 127]
                else :
                    use_char_category = char_category
                #end if
                categories_used.add(use_char_category)
                chars[charcode] = \
                    {
                        "name" : charname,
                        "category" : use_char_category,
                        "other_names" : samechar,
                        "similar" : set(likechar),
                    }
            #end if
            sys.stdout.write \
              (
                    "*%s U+%04X “%s” (%s) = (%s), like (%s)\n"
                %
                    (
                        ("IGNORE", "")[include_it],
                        charcode,
                        charname,
                        use_char_category,
                        "; ".join(samechar),
                        "; ".join("U+%04X" % c for c in likechar),
                    )
              )
            charcode = None
        #end if
        if eof :
            break
        if nextcharcode != None :
            charcode = int(nextcharcode.group(), 16)
            assert line.startswith("\t")
            charname = line[1:]
            samechar = []
            likechar = set()
        elif charcode != None and line.startswith("\t") :
            line = line[1:]
            if line.startswith("= ") :
                samechar.append(line[2:].replace("\"", ""))
            elif line.startswith("x ") :
                nextpos = 2
                while True :
                    nextlikecharcode = re.search(hexdigits, line[nextpos:])
                    if nextlikecharcode == None :
                        break
                    likecharcode = int(nextlikecharcode.group(), 16)
                    nextpos += nextlikecharcode.end()
                #end while
                likechar.add(likecharcode)
            elif line.startswith("# ") :
                # showing equivalent to one or more other characters
                match1 = re.search(hexdigits, line[2:])
                if match1 != None :
                    match2 = re.match(" +" + hexdigits, line[match1.end() + 2:])
                    if match2 == None :
                        # ignore multi-character equivalent
                        likechar.add(int(match1.group(), 16))
                    #end if
                #end if
            else :
                pass # sys.stdout.write("Ignore line for U+%04X: %s\n" % (charcode, repr(line)))
            #end if
        elif line.startswith("@@\t") :
            pieces = re.search("^(" + hexdigits + ")\t(.+)\t(" + hexdigits + ")$", line[3:])
            if pieces != None :
                char_category = pieces.group(2)
                for this_char_category in remap_categories.get(char_category, [char_category]) :
                    if this_char_category not in categories :
                        categories.append(this_char_category)
                    #end if
                #end for
            #end if
        else :
            pass # sys.stdout.write("Ignore line: %s\n" % repr(line))
        #end if
    #end while
#end with

out = DataWriter(out_file, version)
category_codes = {}
for name in sorted(categories) :
    if name in categories_used :
        category_codes[name] = out.add_category(name)
    else :
        sys.stdout.write("ignore unused category “%s”\n" % name)
    #end if
#end for
for thischar in chars :
    # ensure similarity relations apply both ways
    to_delete = set()
    for thatchar in chars[thischar]["similar"] :
        if thatchar in chars :
            chars[thatchar]["similar"].add(thischar) # if not in there already
        else :
            to_delete.add(thatchar)
        #end if
    #end for
    if len(to_delete) != 0 :
        for thatchar in to_delete :
            sys.stdout.write("similar to %#x: no such %#x\n" % (thischar, thatchar))
        #end if
        chars[thischar]["similar"] -= to_delete
    #end if
#end for
for charcode in sorted(chars) :
    thischar = chars[charcode]
    out.add_char \
      (
        code = charcode,
        name = thischar["name"],
        category = category_codes[thischar["category"]],
        othernames = thischar["other_names"],
        likechars = sorted(thischar["similar"]),
      )
#end for
out.finish()
